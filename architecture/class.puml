@startuml Base Log
Title Base Log

class Athlete {
name : string
password : string
email : string
instructors : [Athlete]
jumps : [Jump]
jumpLogs : [JumpLog]
places : [Place]

age : number
gender : string
' record of the jumps user did, has more than 1 log
jumps : [Jump]
' my unique jumps logs
jumpLogs: [JumpLog]

addJumpLog(log : JumpLog)

constructor(name : string, email : string, password : string, instructor : [], places : [])
}

class Jump {
' addJump(Jump)
' Verify: if that place exists
' Verify: if you are linked in date and place with a Jump
modality: BASE
athletes : [Athlete]
place: Place
date : Date

' this is a sinopse
description: string
logs: [JumpLog]

constructor (modality : BASE, athletes : [Athlete], place : Place, date : Date)
}

class JumpLog {
jump: Jump
' this is the full history text
text: string

attachments: [Image | Video | Audio]

constructor (jump: Jump, text: String)
}

class Place {
name : string
coordinates : [number, number]
modality : []
height : number
landing : string
supporter: Supporter
'add child: exitPoint
}

'non Athletes that supports the sport
class Supporter {
' a supporter can associate with a place or a person
athlete: Athlete
place : Place
people : [{
  name: string
  age: number
}]
howSupports : string
}

' Head *- Hand : composition
' Parent o-- IndependentChild : agregation
' Need --> Use : association

Athlete --> Place : nedd a place to jump
Athlete -> Jump : Partial history

Place -> Jump : need info from Jump
Jump *-> DiaryEntry : Full history
Jump --> Supporter : non athletes that supports the sport
DiaryEntry --> Supporter : a history may not have supporters

@enduml



